"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { toast } from 'react-toastify';
import { ClipLoader } from "react-spinners"; // –õ–æ–∞–¥–µ—Ä –∏–∑ react-spinners

const schema = z.object({
  name: z.string().min(2, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ"),
  email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  vin: z.string().optional(),
  message: z.string().optional(),
  file: z.any(),
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Cloudinary
const uploadFileToCloudinary = async (file) => {
  const formData = new FormData();
  formData.append("file", file);

  const res = await fetch("/api/upload", {
    method: "POST",
    body: formData,
  });

  if (!res.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
  }

  const result = await res.json(); // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ JSON

  console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

  return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Ñ–∞–π–ª–∞
};

export default function ContactForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm({ resolver: zodResolver(schema) });

  const [success, setSuccess] = useState(null);
  const [error, setError] = useState(null);

  const onSubmit = async (data) => {
    setError(null);
    setSuccess(null);
  
    let fileUrl = null;
  
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Cloudinary (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å)
    if (data.file.length > 0) {
      const file = data.file[0];
      try {
        const cloudinaryResponse = await uploadFileToCloudinary(file);
        fileUrl = cloudinaryResponse.url;
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ Cloudinary');
        return;
      }
    }
  
    try {
      const res = await fetch("/api/order", {
        method: "POST",
        headers: { "Content-Type": "application/json" }, // üëà –ü–µ—Ä–µ–¥–∞—ë–º JSON
        body: JSON.stringify({
          name: data.name,
          email: data.email,
          vin: data.vin,
          message: data.message,
          fileUrl, // üëà –ü–µ—Ä–µ–¥–∞—ë–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π URL
        }),
      });
  
      const result = await res.json();
      console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);
  
      if (!res.ok) {
        throw new Error(result.message);
      }
  
      setSuccess("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      toast.success("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      console.log("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", result.fileUrl);
    } catch (err) {
      setError(err.message);
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:", err);
      toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <h1 className="text-3xl text-center font-bold mb-6">–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É</h1>

      <input {...register("name")} placeholder="–ò–º—è" className="border p-2 w-full" />
      {errors.name && <p className="text-red-500">{errors.name.message}</p>}

      <input {...register("email")} placeholder="Email/—Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏" className="border p-2 w-full" />
      {errors.email && <p className="text-red-500">{errors.email.message}</p>}

      <input {...register("vin")} placeholder="VIN/Frame –∏–ª–∏ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å –∞–≤—Ç–æ" className="border p-2 w-full" />

      <textarea {...register("message")} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞" className="border p-2 w-full" />

      <input type="file" {...register("file")} className="border p-2 w-full" />

      <button
        type="submit"
        disabled={isSubmitting}
        className="bg-blue-500 text-white p-2 w-full flex items-center justify-center"
      >
        {isSubmitting ? (
          <ClipLoader color="white" size={24} /> // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        ) : (
          "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        )}
      </button>

      {success && <p className="text-green-500">{success}</p>}
      {error && <p className="text-red-500">{error}</p>}
    </form>
  );
}
